#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <locale.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

struct player {
	int name;
	int cards[11];
	int split[11];
	int complexity;
	struct player* next;
};

void print(struct player* plist) {
	int i = 4;
	for (struct player* p = plist;i > 0;p = p->next)
	{
		printf("%d", p->name);
		i--;
	}
}

void default_set(struct player ** plist) 
{
	int i = 3;
	while (i) {
		struct player* p = (struct player*)malloc(sizeof(struct player));
		p->name = i;
		p->next = *plist;
		*plist = p;
		i--;
	}
}

void player(struct player** plist)
{
	struct player* user = (struct player*)malloc(sizeof(struct player));
	user->name = 9; // спрашиваем имя игрока
	user->next = *plist;
	for (int s = 0;s < 11;s++)
		user->cards[s] = 0;
	*plist = user;
}

void pop_player(struct player** plist)
{
	struct player* p = *plist;
	*plist = p->next;
	free(p);
}

void setting(struct player** plist)
{
	printf("//");
	char a=0;
	switch (a)
	{
		scanf("%c", &a);
		case 'c': {

			break;
		}
		case 'd': {
		
			break;
		}
		case 'a': {

			break;
		}
		default: {
			printf("\nIncorrect input\n");
			break;
		}
	}

}

int is_empty(struct player* plist)
{
	return plist == NULL;
}

void easy_level(struct player* point3, short cards[52])
{
	int count = 2;
	if (schet(point3) < 17) {
		while (schet(point3) < 17)
		{
			int number = rand() % 52;
			while (cards[number] < 0)
				number = rand() % 52;
			point3->cards[count] = cards[number];
			cards[number] = -1;
			count++;

			if (schet(point3) > 21)
			{
				for (int j = 0;j < count;j++)
				{
					if (point3->cards[j] == 11)
					{
						point3->cards[j] = 1;
						j = count;
					}
				}
			}
		}
	}
	else if (schet(point3) > 21)
	{
		for (int j = 0;j < count;j++)
		{
			if (point3->cards[j] == 11)
			{
				point3->cards[j] = 1;
				j = count;
			}
		}
		while (schet(point3) < 17)
		{
			int number = rand() % 52;
			while (cards[number] < 0)
				number = rand() % 52;
			point3->cards[count] = cards[number];
			cards[number] = -1;
			count++;

			if (schet(point3) > 21)
			{
				for (int j = 0;j < count;j++)
				{
					if (point3->cards[j] == 11)
					{
						point3->cards[j] = 1;
						j = 0;
					}
				}
			}
		}
	}
	for (int j = 0;j < count;j++)
		printf("%d ", point3->cards[j]);
	if (schet(point3, count) > 21)
		printf("Перебор");

	point3 = point3->next;
	printf("\n");
}


int schet(struct player* plist)
{
	int sum=0;
	struct player* p = plist;
	for (int i = 0;i < 11;i++) {
		sum += p->cards[i];
	}
	return sum;
}

void is_win(struct player* plist, int sum_d)
{
	while (plist->next!=NULL)
	{
		if (schet(plist) > 21)
		{
			printf("Вы проиграли.\n");
		}
		else if (sum_d > 21 || schet(plist) > sum_d)
		{
			printf("Вы выиграли, поздравляем!\n");
		}
		else if (schet(plist) == sum_d)
			printf("Ничья.\n");
		else
			printf("Вы проиграли.\n");
		plist = plist->next;
	}
}

void play(struct player* plist)
{
	int game = 1;
	while(game == 1) {
		game = 0;
		srand(time(NULL));
		short cards[52] = { 2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11 };

		for (struct player* point = plist;!is_empty(point);point = point->next) // раздача карт
		{
			for (int i = 0;i < 2;i++)
			{
				int number = rand(time(NULL)) % 52;
				while (cards[number] < 0)
					number = rand(time(NULL)) % 52;
				point->cards[i] = cards[number];
				cards[number] = -1;
				if (is_empty(point->next) && i == 1)
					printf("?");
				else
					printf("%d ", point->cards[i]);
			}
			printf("\n");
		}

		int chose = 0;
		int i = 1;
		int cout = 2;
		while (i) {
			printf("Выберите действие: 1 - взять карту, 2 - хватит: ");
			scanf("%d", &chose);
			switch (chose)
			{
			case 1:
			{

				// берем дополнительную карту

				int number = rand(time(NULL)) % 52;
				while (cards[number] < 0)
					number = rand(time(NULL)) % 52;
				plist->cards[cout] = cards[number];
				cards[number] = -1;
				cout++;
				if (schet(plist) > 21)
				{
					int flazhok = 0;
					for (int j = 0;j < cout;j++)
					{
						if (plist->cards[j] == 11)
						{
							plist->cards[j] = 1;
							j = 0;
							flazhok++;
						}
					}
					for (int q = 0;q < cout;q++)
						printf("%d ", plist->cards[q]);
					if (!flazhok) {
						i = 0;
						printf("Перебор\n");
					}
				}
				else
				{
					for (int q = 0;q < cout;q++)
						printf("%d ", plist->cards[q]);
				}
				break;
			}
			case 2:
			{
				for (int q = 0;q < cout;q++)
					printf("%d ", plist->cards[q]);
				printf("\n");
				i = 0;
				break;
			}
			case 3:
			{
				break;
			}
			case 4:
			{
				break;
			}
			default:
			{
				printf("Incorrect input");
				i = 0;
				break;
			}
			}
		}

		struct player* point3 = plist;
		point3 = point3->next;

		for (; point3 != NULL; point3 = point3->next)
		{
			for (int s = 2;s < 11;s++)
				point3->cards[s] = 0;
			easy_level(point3, cards);
		}
		struct player* p = plist;
		for (;p->next != NULL;) // p указывает на диллера
			p = p->next;
		int sum_d = schet(p);
		is_win(plist, sum_d);
		printf("Продолжить? 1 - да, 2 - нет\nДействие: ");
		scanf("%d", &game);
	}
}

int main()
{
	setlocale(LC_ALL, "Rus");

	struct player z; // создание диллера
	z.next = NULL;
	struct player* begin = &z;
	begin->name = 88;

	default_set(&begin);  // стандартые настройки (3 бота на легком уровне)
	//print(begin);
	while (1) {
		int a = 0;
		printf("Добро пожаловать в карточную игру BlackJack!\n\n\t\t Меню\n\n\t  1 - начать играть\n\n\t  2 - настройки\n\n\t  3 - выход из игры\n\n\t  Выберите действие: ");
		scanf("%d", &a);
		switch (a) 
		{
			case 1: 
			{
				player(&begin); // добавление игрока
				play(begin); // начать играть
				pop_player(&begin); // удаление игрока 
				break;
			}
			case 2: 
			{
				setting(&begin); // настройки
				break;
			}
			case 3: 
			{
				return 0; // выход из программы
				break;
			}
			default:
			{
				printf("Incorrect input");
				break;
			}
		}
	}
}

